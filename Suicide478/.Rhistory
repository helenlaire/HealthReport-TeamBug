usa_data <- usa_data %>% mutate(Rate = round(Death/Population*100000,2))
usa_data <- usa_data %>% select(5,2,1,3,4,6)
data$States <-substr(data$State, 1, data$state_length -5)
df <- data %>% select(9,2,3,4,5,7)
combined_df <- bind_rows(usa_data, df)
write.csv(combined_df, file = 'data/combined.csv')
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
overall_trend <- function(combined_df,state_one, state_two, gender_choice){
chosen_states <- combined_df %>% filter(States == state_one| States == state_two| States == "United States")
chosen_gender <- chosen_states %>% filter(Gender == gender_choice)
p <- ggplot(data = chosen_gender) +
geom_line(mapping = aes(x= Year, y = Rate, group = States, color = States))+
geom_point(mapping = aes(x= Year, y = Rate, group = States, color = States))
p
}
library(dplyr)
library(ggplot2)
library(tidyr)
data <- read.csv("data/intentional_self_harm_data.csv")
data$Death <- as.numeric(as.character(data$Death))
data$Population <- as.numeric(as.character(data$Population))
data <- data %>% mutate(Rate = round(Death/Population*100000,2))
as.character(data$State)
data$state_length <- nchar(as.character(data$State))
data$state_length <- as.numeric(data$state_length)
usa_data <- data %>% group_by(Year, Gender) %>% summarize(Death = sum(Death), Population = sum(Population), States = "United States")
usa_data <- usa_data %>% mutate(Rate = round(Death/Population*100000,2))
usa_data <- usa_data %>% select(5,2,1,3,4,6)
data$States <-substr(data$State, 1, data$state_length -5)
df <- data %>% select(9,2,3,4,5,7)
combined_df <- bind_rows(usa_data, df)
write.csv(combined, file = 'data/combined.csv')
library(dplyr)
library(ggplot2)
library(tidyr)
data <- read.csv("data/intentional_self_harm_data.csv")
data$Death <- as.numeric(as.character(data$Death))
data$Population <- as.numeric(as.character(data$Population))
data <- data %>% mutate(Rate = round(Death/Population*100000,2))
as.character(data$State)
data$state_length <- nchar(as.character(data$State))
data$state_length <- as.numeric(data$state_length)
usa_data <- data %>% group_by(Year, Gender) %>% summarize(Death = sum(Death), Population = sum(Population), States = "United States")
usa_data <- usa_data %>% mutate(Rate = round(Death/Population*100000,2))
usa_data <- usa_data %>% select(5,2,1,3,4,6)
data$States <-substr(data$State, 1, data$state_length -5)
df <- data %>% select(9,2,3,4,5,7)
combined_df <- bind_rows(usa_data, df)
write.csv(combined_df, file = 'data/combined.csv')
library(dplyr)
library(ggplot2)
library(tidyr)
data <- read.csv("data/intentional_self_harm_data.csv")
data$Death <- as.numeric(as.character(data$Death))
data$Population <- as.numeric(as.character(data$Population))
data <- data %>% mutate(Rate = round(Death/Population*100000,2))
as.character(data$State)
data$state_length <- nchar(as.character(data$State))
data$state_length <- as.numeric(data$state_length)
usa_data <- data %>% group_by(Year, Gender) %>% summarize(Death = sum(Death), Population = sum(Population), States = "United States")
usa_data <- usa_data %>% mutate(Rate = round(Death/Population*100000,2))
usa_data <- usa_data %>% select(5,2,1,3,4,6)
data$States <-substr(data$State, 1, data$state_length -5)
df <- data %>% select(9,2,3,4,5,7)
combined_df <- bind_rows(usa_data, df)
write.csv(combined_df, file = 'data/combined.csv')
shiny::runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
state_list <- unique(df$States)
state_list <- unique(df$States)
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
gender_list <- unique(df$Gender)
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
shiny::runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
library(dplyr)
library(ggplot2)
library(tidyr)
data <- read.csv("data/intentional_self_harm_data.csv")
data$Death <- as.numeric(as.character(data$Death))
data$Population <- as.numeric(as.character(data$Population))
data <- data %>% mutate(Rate = round(Death/Population*100000,2))
as.character(data$State)
data$state_length <- nchar(as.character(data$State))
data$state_length <- as.numeric(data$state_length)
usa_data <- data %>% group_by(Year, Gender) %>% summarize(Death = sum(Death), Population = sum(Population), States = "United States")
usa_data <- usa_data %>% mutate(Rate = round(Death/Population*100000,2))
usa_data <- usa_data %>% select(5,2,1,3,4,6)
data$States <-substr(data$State, 1, data$state_length -5)
df <- data %>% select(9,2,3,4,5,7)
combined_df <- bind_rows(usa_data, df)
write.csv(combined_df, file = 'data/combined.csv')
state_list <- unique(df$States)
gender_list <- unique(df$Gender)
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp()
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp()
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
state_list <- unique(combined_df$States)
gender_list <- unique(combined_df$Gender)
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
combined_df <- read.csv(file = "../Overall-Claire/data/combined.csv")
state_list <- unique(combined_df$States)
gender_list <- unique(combined_df$Gender)
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
source("../External_Factors/carol_analysis.R")
external <- read.csv(file = "../External_Factors/data/prepare_data.csv")
source("../Overall-Claire/analysis.R")
combined_df <- read.csv(file = "../Overall-Claire/data/combined.csv")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
## Claire's Code
output$trend_graph <- renderPlot({
return(overall_trend(combined_df, input$region1, input$region2,input$gender))
})
## Daisy's Code
## Mengjiao's Code
## Carol's Code
output$external_plot <- renderPlot({
return(create_plot(external, input$external_factors))
})
})
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinythemes)
library(markdown)
library(plotly)
combined_df <- read.csv(file = "../Overall-Claire/data/combined.csv")
state_list <- unique(combined_df$States)
gender_list <- unique(combined_df$Gender)
# Define UI for application that draws a histogram
shinyUI(tagList(
navbarPage(theme = shinytheme("slate"),
"Suicide",
# Claire's Panel
tabPanel(
"Trend of Suicide in the U.S.",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "region1", label = "Select First Region", selected = "Washington",state_list
),
selectInput(
inputId = "region2", label = "Select Second Region", selected = "California",state_list
),
selectInput(inputId = "gender", label = "Select Gender", selected = "Female", gender_list),
),
mainPanel(
plotlyOutput("trend_graph")
) # main panel
) # sidebar layout
), # tabPanel
# Carol's Panel
tabPanel(
"Worldwide Statistics",
titlePanel(tags$div(tags$h1(class = "Title",
"External Factors"))),
sidebarLayout(
sidebarPanel(
selectInput('external_factors',
label = h3('Choose an possible external factor'),
choices = list(
'GDP' = 'GDP',
'Health Expenditure' = 'Health',
'Unemployment Rate' = 'Unemployment'
),
width = '200px'
),
tags$br(),
tags$h3("Description"),
tags$h5(class = "context",
"With this interactive bar chart, you can explore the
dataset within different time periods. In the specific
decade you choose, the graph displays numbers of shark
attacks against different time periods. For instance,
if you want to learn about the month with the highest
frequency of attacks and the month with less frequency of
attacks between 2010-2017. You can do this in two simple
steps:"),
tags$h5(class = "context", "1. Set the decade to 2010-2017"),
tags$h5(class = "context", "2. Set the unit, time period, as month."),
tags$h5(class = "context", "That's it! Feel free to explore!")
),
mainPanel(
plotOutput("external_plot",
width = "800px", height = "600px"
)
)
)
),
# Daisy's Panel
tabPanel(
"Risk Factors of Suicide",
tabsetPanel(
#tab1 introduction
tabPanel(
"Introduction"
# includeMarkdown("Script/TaxMarkDown.Rmd")
),
# more panels overhere
tabPanel(
"Sub - Panel 2"
# includeMarkdown("Script/TaxMarkDown.Rmd")
)
)
),
# Mengjiao's Panel
tabPanel(
"Preventive Factors of Suicide",
tabsetPanel(
#tab1 introduction
tabPanel(
"Introduction"
# includeMarkdown("Script/TaxMarkDown.Rmd")
),
# more panels overhere
tabPanel(
"Sub - Panel 2"
# includeMarkdown("Script/TaxMarkDown.Rmd")
)
)
)
)
))
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
source("../External_Factors/carol_analysis.R")
external <- read.csv(file = "../External_Factors/data/prepare_data.csv")
source("../Overall-Claire/analysis.R")
combined_df <- read.csv(file = "../Overall-Claire/data/combined.csv")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
## Claire's Code
output$trend_graph <- renderPlot({
return(overall_trend(combined_df, input$region1, input$region2,input$gender))
})
## Daisy's Code
## Mengjiao's Code
## Carol's Code
output$external_plot <- renderPlot({
return(create_plot(external, input$external_factors))
})
})
library(dplyr)
library(ggplot2)
library(tidyr)
data <- read.csv("data/intentional_self_harm_data.csv")
data$Death <- as.numeric(as.character(data$Death))
data$Population <- as.numeric(as.character(data$Population))
data <- data %>% mutate(Rate = round(Death/Population*100000,2))
as.character(data$State)
data$state_length <- nchar(as.character(data$State))
data$state_length <- as.numeric(data$state_length)
usa_data <- data %>% group_by(Year, Gender) %>% summarize(Death = sum(Death), Population = sum(Population), States = "United States")
usa_data <- usa_data %>% mutate(Rate = round(Death/Population*100000,2))
usa_data <- usa_data %>% select(5,2,1,3,4,6)
data$States <-substr(data$State, 1, data$state_length -5)
df <- data %>% select(9,2,3,4,5,7)
combined_df <- bind_rows(usa_data, df)
write.csv(combined_df, file = 'data/combined.csv')
state_list <- unique(df$States)
gender_list <- unique(df$Gender)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
overall_trend <- function(combined_df,state_one, state_two, gender_choice){
chosen_states <- combined_df %>% filter(States == state_one| States == state_two| States == "United States")
chosen_gender <- chosen_states %>% filter(Gender == gender_choice)
p <- ggplot(data = chosen_gender) +
geom_line(mapping = aes(x= Year, y = Rate, group = States, color = States))+
geom_point(mapping = aes(x= Year, y = Rate, group = States, color = States))
p
}
shiny::runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp()
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinythemes)
library(markdown)
library(plotly)
combined_df <- read.csv(file = "../Overall-Claire/data/combined.csv")
state_list <- unique(combined_df$States)
gender_list <- unique(combined_df$Gender)
# Define UI for application that draws a histogram
shinyUI(tagList(
navbarPage(theme = shinytheme("slate"),
"Suicide",
# Claire's Panel
tabPanel(
"Worldwide Statistics",
titlePanel(tags$div(tags$h1(class = "Title",
"Overall Trend"))),
sidebarLayout(
sidebarPanel(
selectInput('region1',
label = h3('Select a State'),
choices = state_list,
width = '200px'),
selectInput('region2',
label = h3('Select a State'),
choices = state_list,
width = '200px'),
selectInput('gender',
label = h3('Select a Gender'),
choices = gender_list,
width = '200px'),
tags$br(),
tags$h3("Description"),
tags$h5(class = "context",
"With this interactive bar chart, you can explore the"),
tags$h5(class = "context", "1. Set the decade to 2010-2017")
),
mainPanel(
plotOutput("trend_graph",
width = "800px", height = "600px"
)
)
)
),
# Carol's Panel
tabPanel(
"Worldwide Statistics",
titlePanel(tags$div(tags$h1(class = "Title",
"External Factors"))),
sidebarLayout(
sidebarPanel(
selectInput('external_factors',
label = h3('Choose an possible external factor'),
choices = list(
'GDP' = 'GDP',
'Health Expenditure' = 'Health',
'Unemployment Rate' = 'Unemployment'
),
width = '200px'
),
tags$br(),
tags$h3("Description"),
tags$h5(class = "context",
"With this interactive bar chart, you can explore the
dataset within different time periods. In the specific
decade you choose, the graph displays numbers of shark
attacks against different time periods. For instance,
if you want to learn about the month with the highest
frequency of attacks and the month with less frequency of
attacks between 2010-2017. You can do this in two simple
steps:"),
tags$h5(class = "context", "1. Set the decade to 2010-2017"),
tags$h5(class = "context", "2. Set the unit, time period, as month."),
tags$h5(class = "context", "That's it! Feel free to explore!")
),
mainPanel(
plotOutput("external_plot",
width = "800px", height = "600px"
)
)
)
),
# Daisy's Panel
tabPanel(
"Risk Factors of Suicide",
tabsetPanel(
#tab1 introduction
tabPanel(
"Introduction"
# includeMarkdown("Script/TaxMarkDown.Rmd")
),
# more panels overhere
tabPanel(
"Sub - Panel 2"
# includeMarkdown("Script/TaxMarkDown.Rmd")
)
)
),
# Mengjiao's Panel
tabPanel(
"Preventive Factors of Suicide",
tabsetPanel(
#tab1 introduction
tabPanel(
"Introduction"
# includeMarkdown("Script/TaxMarkDown.Rmd")
),
# more panels overhere
tabPanel(
"Sub - Panel 2"
# includeMarkdown("Script/TaxMarkDown.Rmd")
)
)
)
)
))
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
shiny::runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/finalproject')
runApp('~/Desktop/finalproject')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
install.packages("DT")
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
install.packages("tidyverse")
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
View(combined_df)
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
install.packages("ggplotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
shiny::runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
shiny::runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
runApp('~/Desktop/HealthReport-TeamBug/Suicide478')
setwd("~/Desktop/HealthReport-TeamBug/Suicide478")
runApp()
