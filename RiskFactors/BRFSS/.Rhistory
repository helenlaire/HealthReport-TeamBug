geom_line(aes(x = year, y = n, color = state))
# Save the chart in a directory "charts/"
ggsave("line_graph.png", path='charts/')
View(data)
View(by_year)
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
# Pass your `population` variable to your function
population = function(population)
# Set up
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
# Write a function to simulate comorbid ylds
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
population['malaria_case'] = rbinom(population, 1, malaria_p)
population['hiv_case'] = rbinom(population, 1, hiv_p)
if (population['malaria_case'] == 1) {
population['malaria_ylds'] = malaria_dw
} else {
population['malaria_ylds'] = 0
}
if (population['hiv_case'] == 1) {
population['hiv_ylds'] = hiv_dw
} else {
population['hiv_ylds'] = 0
}
if (population['malaria_case'] == 0 && population['hiv_case'] == 0) {
population['total_ylds'] = 0
} else {
population['total_ylds'] = 1 - (1 - population['hiv_ylds']) *
(1 - population['malaria_ylds'])
}
return (population)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to
population = function(population)
View(population)
View(simulate)
population = simulate(population)
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
# Write a function to simulate comorbid ylds
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
population['malaria_case'] = rbinom(population, 1, malaria_p)
population['hiv_case'] = rbinom(population, 1, hiv_p)
if (population['malaria_case'] == 1) {
population['malaria_ylds'] = malaria_dw
} else {
population['malaria_ylds'] = 0
}
if (population['hiv_case'] == 1) {
population['hiv_ylds'] = hiv_dw
} else {
population['hiv_ylds'] = 0
}
if (population['malaria_case'] == 0 && population['hiv_case'] == 0) {
population['total_ylds'] = 0
} else {
population['total_ylds'] = 1 - (1 - population['hiv_ylds']) *
(1 - population['malaria_ylds'])
}
return (population)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your function
population = simulate(population)
population <- rep(0, 100)
simulate <- function(population) {
data[] =
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && populationhiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data <- list(c(malaria_case, hiv_case, hiv_ylds, malaria_ylds, total_ylds))
return (data())
}
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
# Write a function to simulate comorbid ylds
simulate <- function(population) {
data[] =
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && populationhiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data <- list(c(malaria_case, hiv_case, hiv_ylds, malaria_ylds, total_ylds))
return (data)
}
population = simulate(population)
data <- simulate(population)
data<- simulate(population)
data <- list()
data <- simulate(population)
View(data)
simulate <- function(population) {
data[] =
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && hiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data <- list(c(malaria_case, hiv_case, hiv_ylds, malaria_ylds, total_ylds))
return (data)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your function
data <- list()
data <- simulate(population)
View(data)
data[[1]]
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && hiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data <- list(c(malaria_case, hiv_case, hiv_ylds, malaria_ylds, total_ylds))
return (data)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your function
data <- list()
data <- simulate(population)
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && hiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data <- list(malaria_case, hiv_case, hiv_ylds, malaria_ylds, total_ylds)
return (data)
}
View(data)
rbinom(100, 1, 0.3)
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && hiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data['malaria_case'] <- malaria_case
return (data)
}
View(data)
data <- list()
data <- simulate(population)
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && hiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data['malaria_case', ] <- malaria_case
return (data)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your function
data <- list()
data <- simulate(population)
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
if (malaria_case == 1) {
malaria_ylds = malaria_dw
} else {
malaria_ylds = 0
}
if (hiv_case == 1) {
hiv_ylds = hiv_dw
} else {
hiv_ylds = 0
}
if (malaria_case == 0 && hiv_case == 0) {
total_ylds = 0
} else {
total_ylds = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
}
data <- data.frame('malaria_case' = malaria_case, 'hiv' = hiv_case)
return (data)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your function
data <- simulate(population)
View(data)
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
data <- data.frame('malaria_case' = malaria_case,  'hiv_case' = hiv_case)
data[malaria_case == 1, 'malaria_ylds'] <- malaria_dw
data[malaria_case == 0, 'malaria_ylds'] <- 0
data[hiv_case == 1, 'hiv_ylds'] <- hiv_dw
data[hiv_case == 0, 'hiv_ylds'] <- 0
data['total_ylds'] = 1 - (1 - hiv_ylds) * (1 - malaria_ylds)
data[malaria_case == 0 && hiv_case == 0, 'total_ylds'] = 0
return (data)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your
data <- simulate(population)
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
data <- data.frame('malaria_case' = malaria_case,  'hiv_case' = hiv_case)
data[malaria_case == 1, 'malaria_ylds'] <- malaria_dw
data[malaria_case == 0, 'malaria_ylds'] <- 0
data[hiv_case == 1, 'hiv_ylds'] <- hiv_dw
data[hiv_case == 0, 'hiv_ylds'] <- 0
data['total_ylds'] = 1 - (1 - data$hiv_ylds) * (1 - data$malaria_ylds)
data[malaria_case == 0 && hiv_case == 0, 'total_ylds'] = 0
return (data)
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your function
data <- simulate(population)
View(data)
# Simulate Comorbidities
library(ggplot2)
# Set up
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
# Write a function to simulate comorbid ylds
simulate <- function(population) {
# Simulate a set of cases and YLDs for each disease
malaria_p = unlist(prevalences['malaria'])
malaria_dw = unlist(disability_weights['malaria'])
hiv_p = unlist(prevalences['hiv'])
hiv_dw = unlist(disability_weights['hiv'])
malaria_case = rbinom(population, 1, malaria_p)
hiv_case = rbinom(population, 1, hiv_p)
data <- data.frame('malaria_case' = malaria_case,  'hiv_case' = hiv_case)
data[malaria_case == 1, 'malaria_ylds'] <- malaria_dw
data[malaria_case == 0, 'malaria_ylds'] <- 0
data[hiv_case == 1, 'hiv_ylds'] <- hiv_dw
data[hiv_case == 0, 'hiv_ylds'] <- 0
data['total_ylds'] = 1 - (1 - data$hiv_ylds) * (1 - data$malaria_ylds)
data[malaria_case == 0 && hiv_case == 0, 'total_ylds'] = 0
unadjusted_ylds = sum(data['hiv_ylds'] + data['malaria_ylds'])
adjusted_ylds = sum(data['total_ylds'])
return (list(adjusted_ylds, unadjusted_ylds))
}
# Compute unadjusted, adjusted YLDs: then return a list containing both values
# Pass your `population` variable to your function
ylds <- simulate(population)
# To show the variation in results, run your function 1000 times
# and keep track of the unadjusted and adjusted values
adjusted <- list()
unadjusted <- list()
for (i in 1:1000) {
list <- simulate(population)
adjusted[i] = unlist(list[1])
unadjusted[i] = unlist(list[2])
}
dat <- data.frame('adjusted' = unlist(adjusted), 'unadjusted' = unlist(unadjusted))
# Graph variation in results (histogram of all_unadjusted)
ggplot(dat, aes(unadjusted)) +
geom_histogram()
# Save your plot into a folder `charts/`
ggsave('unadjusted.png', path = 'charts/')
# Create a histogram of the ratio of the adjusted to unadjusted values
ggplot(dat, aes(adjusted / unadjusted)) +
geom_histogram()
# Save your plot into a folder `charts/`
ggsave('ratio of the adjusted to unadjusted.png', path = 'charts/')
ggplot(dat, aes(unadjusted / adjusted)) +
geom_histogram()
ggplot(dat, aes(adjusted / unadjusted)) +
geom_histogram()
library("tools")
library('HSAUR')
library('ggplot2')
library('dplyr')
library(ggrepel)
data("BCG", package = "HSAUR")
data('birthwt', package = 'MASS')
# BCGTB the number of subjects suffering from TB after a BCG vaccination.
# BCGVacc the number of subjects with BCG vaccination.
# NoVaccTB the number of subjects suffering from TB without BCG vaccination.
# NoVacc the total number of subjects without BCG vaccination.
BCG <- BCG %>% mutate(odds_Of_BCG_have_TB = BCGTB / NoVaccTB,
odds_Of_BCG_have_NoTB = (BCGVacc - BCGTB) / (NoVacc - NoVaccTB),
odds_ratio = round(odds_Of_BCG_have_TB / odds_Of_BCG_have_NoTB,
digits = 2))
odds <- ggplot(BCG, aes(x = odds_Of_BCG_have_NoTB, y = odds_Of_BCG_have_TB)) +
geom_label_repel(aes(label = odds_ratio, color = odds_ratio)) +
labs(x = 'Odds of a BCG vaccined person not having Tuberculosis',
y = 'Odds of a BCG vaccined person having Tuberculosis',
color = 'odds ratio')
re_latitude <- ggplot(BCG, aes(x = odds_ratio, y = Latitude)) +
geom_point()
re_year <- ggplot(BCG, aes(x = odds_ratio, y = Year)) +
geom_point()
# Relative Risk
BCG <- BCG %>% mutate(risk_of_TB_with_BCG = BCGTB / BCGVacc,
risk_of_TB_with_NoBCG = NoVaccTB / NoVacc,
relative_risk = round(risk_of_TB_with_BCG / risk_of_TB_with_NoBCG, digits = 2))
compare <- ggplot(BCG, aes(x = odds_ratio, y = relative_risk)) +
geom_point() +
geom_abline(slope=1, intercept=0, alpha = .3)
# Low Birth Weight
ggplot(birthwt, aes(x = low)) +
geom_histogram()
ggplot(birthwt, aes(x = smoke)) +
geom_histogram()
summary(birthwt['bwt'])
View(BCG)
?(birthwt, package='MASS')
?(package='MASS')
help(birthwt, package = "MASS")
ggplot(birthwt, aes(x = low)) +
geom_histogram()
ggplot(birthwt, aes(x = smoke)) +
geom_histogram()
ggplot(birthwt, aes(x = ht)) +
geom_histogram()
ggplot(birthwt, aes(x = age)) +
geom_histogram()
ggplot(birthwt, aes(x = ftv)) +
geom_histogram()
shiny::runApp('Desktop/Data Analysis/Cancer Research Project/cancer_research')
shiny::runApp('Desktop/Data_Analysis/Cancer Research/Line_plot')
runApp('Desktop/Data_Analysis/Cancer Research/Line_plot')
runApp('Desktop/Data_Analysis/Cancer Research/Line_plot')
runApp('Desktop/Data_Analysis/Cancer Research/Line_plot')
shiny::runApp('Desktop/HealthReport-TeamBug/RiskFactors/BRFSS')
shiny::runApp('Desktop/HealthReport-TeamBug/RiskFactors/BRFSS')
shiny::runApp('Desktop/HealthReport-TeamBug/RiskFactors/BRFSS')
shiny::runApp('Desktop/HealthReport-TeamBug/RiskFactors/BRFSS')
shiny::runApp('Desktop/HealthReport-TeamBug/RiskFactors/BRFSS')
runApp('Desktop/HealthReport-TeamBug/RiskFactors/BRFSS')
runApp('Desktop/HealthReport-TeamBug/RiskFactors/BRFSS')
setwd("~/Desktop/HealthReport-TeamBug/RiskFactors/BRFSS")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat("hello\nworld\n")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
